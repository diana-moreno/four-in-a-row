{"version":3,"sources":["components/Rules/rules.gif","components/Piece/Piece.js","components/Board/Board.js","components/TwoPlayers/TwoPlayers.js","components/SinglePlayer/SinglePlayer.js","components/Rules/Rules.js","App.js","settings.js","serviceWorker.js","index.js"],"names":["module","exports","Piece","X","Y","color","className","Board","playGame","divClassName","onClick","TwoPlayers","state","boardGame","Array","fill","map","player","isWon","mode","column","lastEmptyPosition","getLastEmptyPosition","putAPiece","checkIfWinner","restart","setState","emptyPositions","this","forEach","row","indexRow","elem","indexElem","push","x","y","length","getAllEmptyPositions","filter","sort","a","b","coord","horizontalMatrix","verticalMatrix","transposeMatrix","checkIfWinHorizontal","checkIfWinDiagonalLeft","checkIfWinDiagonalRight","col","i","matrix","j","rowIndex","cell","cellIndex","key","to","Component","SinglePlayer","playPc","setTimeout","decisionPc","artificialInteligence","console","log","nextHorizontalRightPosition","nextHorizontalLeftPosition","rightPositionAvailable","leftPositionAvailable","nextVerticalPosition","verticalPositionAvailable","nextDiagonalLeftPosition","diagonalLeftPositionAvailable","nextDiagonalRightPosition","diagonalRightPositionAvailable","availableColumns","item","index","array","indexOf","randomColumn","Math","floor","random","pcMovesInHorizontal","checkHorizontalIA","pcMovesInVertical","checkVerticalIA","pcMovesInDiagonalLeft","checkDiagonalLeftIA","pcMovesInDiagonalRight","checkDiagonalRightIA","pcRandomMove","getRandomPositionPc","posibleMovements","prevProps","prevState","Rules","src","rulesGIf","alt","App","basename","process","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.228c8bf4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/rules.d53af3ef.gif\";","import React from 'react';\nimport { string, number } from 'prop-types';\n\nconst Piece = ({X, Y, color}) =>\n  <div className={`box box-position-${X}-${Y} ${color}`}></div>\n\nPiece.propTypes = {\n  X: number.isRequired,\n  Y: number.isRequired,\n  color: string,\n}\n\nexport default Piece;","import React, { Fragment } from 'react';\nimport './Board.css';\nimport Piece from '../Piece/Piece';\nimport { string, func, number } from 'prop-types';\n\nconst Board = ({ playGame, Y, X, color }) => {\n\n  // cuando el usuario hace click en cualquier celda, esta función se redirige a la función pasada por propiedades 'getLastEmptyPosition', y le pasa el valor de la columna a la que pertenece esa celda seleccionada.\n  const userChoosesColumn = () => playGame(Y);\n\n  // se renderiza el tablero completo indicando unas clases que están vinculadas a una posición y un estilo en CSS.\n  const divClassName = `box box-position-${X}-${Y} column-${Y}`\n\n  return(\n    <Fragment>\n      <Piece X = {X} Y = {Y} color = {color} />\n      <div onClick={userChoosesColumn} className={divClassName}></div>\n   </Fragment>\n  )\n}\n\nBoard.propTypes = {\n  X: number.isRequired,\n  Y: number.isRequired,\n  color: string,\n  playGame: func.isRequired,\n}\n\nexport default Board;","import React, { Component, Fragment } from 'react';\nimport '../../App.css';\nimport Board from '../Board/Board';\nimport { Link } from 'react-router-dom';\n\n\nclass TwoPlayers extends Component {\n  state = {\n    boardGame: Array(6).fill().map(()=>Array(7).fill(null)),\n    color: 'red',\n    player: 'Player 2',\n    isWon: false,\n    mode: 'twoPlayers'\n  }\n\n  // encuentra todas las posiciones vacías en la matriz\n  getAllEmptyPositions() {\n    let emptyPositions = [];\n    this.state.boardGame.forEach((row, indexRow) => {\n      row.forEach((elem, indexElem) => {\n        if(!elem)\n          emptyPositions.push({x: indexRow, y: indexElem})\n      })\n    })\n    if(emptyPositions.length === 1 && !this.state.isWon) {\n      this.setState({\n        ...this.state,\n        isWon: 'draw'\n      })\n    }\n    return emptyPositions;\n  }\n\n  // encuentra la última posición vacía en la matriz según la columna elegida por el usuario que es pasada como parámetro\n  getLastEmptyPosition(column) {\n    let allEmptyPositions = this.getAllEmptyPositions();\n    let lastEmptyPosition = allEmptyPositions\n      .filter(elem => elem.y === column)\n      .sort((a, b) => b.x - a.x)[0]\n    return lastEmptyPosition;\n  }\n\n  // comprueba si ya hay un ganador, si no lo hay, encuentra un lugar libre para colocar la ficha, la coloca y comprueba si se ha ganado.\n  playGame = (column) => {\n    if(!this.state.isWon) {\n      let lastEmptyPosition = this.getLastEmptyPosition(column)\n      this.putAPiece(lastEmptyPosition)\n      this.checkIfWinner()\n    }\n  }\n\n  // coloca una ficha en el tablero según las coordenadas pasadas como parámetro\n  putAPiece(coord) {\n    let x = coord.x;\n    let y = coord.y\n    let boardGame = [...this.state.boardGame];\n    boardGame[x][y] = this.state.color;\n\n    this.setState({\n      ...this.state,\n      boardGame,\n      color: this.state.color === 'red' ? 'blue' : 'red',\n      player: this.state.player === 'Player 1' ? 'Player 2' : 'Player 1'\n    })\n  }\n\n  // comprueba si algún jugador ha ganado, ya sea haciendo linea horizontal, vertical o en cualquier diagonal.\n  checkIfWinner() {\n    let color = this.state.color\n    let horizontalMatrix = [...this.state.boardGame]\n    let verticalMatrix = this.transposeMatrix(horizontalMatrix)\n    this.checkIfWinHorizontal(color, horizontalMatrix)\n    this.checkIfWinHorizontal(color, verticalMatrix)\n    this.checkIfWinDiagonalLeft(color, horizontalMatrix)\n    this.checkIfWinDiagonalRight(color, horizontalMatrix)\n  }\n\n  // transpone la matriz, girándola para convertir las filas en columnas y poder comprobar si hay linea en horizontal y aprovechar la función checkIfWinHorizontal\n  transposeMatrix(horizontalMatrix) {\n    let verticalMatrix = horizontalMatrix[0].map((col, i) =>\n                           horizontalMatrix.map(row => row[i]));\n    return verticalMatrix;\n  }\n\n  // comprobar si hay linea en horizontal\n  checkIfWinHorizontal(color, matrix) {\n    for(let i = 0; i < matrix.length; i++) {\n      for(let j = 0; j < matrix[i].length; j++) {\n        if(matrix[i][j] === matrix[i][j+1]\n          && matrix[i][j] === matrix[i][j+2]\n          && matrix[i][j] === matrix[i][j+3]\n          && matrix[i][j] === color) {\n          this.setState({\n            ...this.state,\n            isWon: true\n          })\n        }\n      }\n    }\n  }\n\n  // comprobar si hay linea en la diagonal de izquierda a derecha\n  checkIfWinDiagonalLeft(color, matrix) {\n    for(let i = 3; i < matrix.length; i++) {\n      for(let j = 0; j < matrix[i].length; j++) {\n        if(matrix[i][j] === matrix[i-1][j+1]\n          && matrix[i][j] === matrix[i-2][j+2]\n          && matrix[i][j] === matrix[i-3][j+3]\n          && matrix[i][j] === color) {\n          this.setState({\n            ...this.state,\n            isWon: true\n          })\n        }\n      }\n    }\n  }\n\n  // comprobar si hay linea en la diagonal de derecha a izquierda\n  checkIfWinDiagonalRight(color, matrix) {\n    for(let i = 5; i > 3; i--) {\n      for(let j = 6; j > 3; j--) {\n        if(matrix[i][j] === matrix[i-1][j-1]\n         && matrix[i][j] === matrix[i-2][j-2]\n          && matrix[i][j] === matrix[i-3][j-3]\n          && matrix[i][j] === color) {\n          this.setState({\n            ...this.state,\n            isWon: true\n          })\n        }\n      }\n    }\n  }\n\n  // reinicia el state\n  restart = () => {\n    this.setState({\n      boardGame: Array(6).fill().map(()=>Array(7).fill(null)),\n      color: 'red',\n      player: 'Player 2',\n      isWon: false\n    })\n  }\n\n  // renderizar la aplicación\n  render() {\n    return (\n      <Fragment>\n        <main>\n          <div className='left-container'>\n            <div className=\"boardGame-container\">\n              {this.state.boardGame.map((row, rowIndex) => (\n                row.map((cell, cellIndex) => (\n                  <Board\n                    X = {rowIndex}\n                    Y = {cellIndex}\n                    color = {cell}\n                    playGame = {this.playGame}\n                    key = {rowIndex + ' ' + cellIndex}\n                  />\n                ))\n              ))}\n            </div>\n          </div>\n          <div className='right-container'>\n          {!this.state.isWon ?\n            <div className='text-turn-container'>\n              <h2>{this.state.player}, is your turn.</h2>\n              <div className='turn-container'>\n                <h2 className={this.state.player === 'Player 1' ? 'blue' : 'blue inactive'}>Player 1</h2>\n                <h2 className={this.state.player === 'Player 2' ? 'red' : 'red inactive'}>Player 2</h2>\n              </div>\n            </div>\n            :\n            <div className='winner-container'>\n              <h2>{this.state.isWon === true ? this.state.player + ' wins!' : 'This is a draw!'}</h2>\n            </div>\n          }\n            <div>\n              <button onClick={this.restart} className='restart-button'>\n                  Restart\n              </button>\n                <Link to='/'>\n                  <button className='end-game-button'>\n                    End game\n                  </button>\n                </Link>\n            </div>\n          </div>\n        </main>\n      </Fragment>\n    );\n  }\n}\n\nexport default TwoPlayers;\n","import React, { Component, Fragment } from 'react';\nimport '../../App.css';\nimport Board from '../Board/Board';\nimport { Link } from 'react-router-dom';\n\n\nclass SinglePlayer extends Component {\n  state = {\n    boardGame: Array(6).fill().map(() => Array(7).fill(null)),\n    color: 'red',\n    player: 'Player 2',\n    isWon: false\n  }\n\n  // encuentra todas las posiciones vacías en la matriz\n  getAllEmptyPositions() {\n    let emptyPositions = [];\n    this.state.boardGame.forEach((row, indexRow) => {\n      row.forEach((elem, indexElem) => {\n        if(!elem)\n          emptyPositions.push({x: indexRow, y: indexElem})\n      })\n    })\n    if(emptyPositions.length === 1 && !this.state.isWon) {\n      this.setState({\n        ...this.state,\n        isWon: 'draw'\n      })\n    }\n    return emptyPositions;\n  }\n\n  // encuentra la última posición vacía en la matriz según la columna elegida por el usuario que es pasada como parámetro\n  getLastEmptyPosition(column) {\n    let allEmptyPositions = this.getAllEmptyPositions();\n    let lastEmptyPosition = allEmptyPositions\n      .filter(elem => elem.y === column)\n      .sort((a, b) => b.x - a.x)[0]\n    return lastEmptyPosition;\n  }\n\n  // comprueba si ya hay un ganador, si no lo hay, encuentra un lugar libre para colocar la ficha, la coloca y comprueba si se ha ganado.\n  playGame = (column) => {\n    if(!this.state.isWon) {\n      let lastEmptyPosition = this.getLastEmptyPosition(column)\n      this.putAPiece(lastEmptyPosition)\n      this.checkIfWinner('red')\n    }\n  }\n\n  // coloca una ficha en el tablero según las coordenadas pasadas como parámetro\n  putAPiece(coord) {\n    let x = coord.x;\n    let y = coord.y\n    let boardGame = [...this.state.boardGame];\n    boardGame[x][y] = this.state.color;\n\n    this.setState({\n      ...this.state,\n      boardGame,\n      color: this.state.color === 'red' ? 'blue' : 'red',\n      player: this.state.player === 'Player 1' ? 'Player 2' : 'Player 1'\n    })\n  }\n\n  // comprueba si algún jugador ha ganado, ya sea haciendo linea horizontal, vertical o en cualquier diagonal.\n  checkIfWinner(color) {\n    let horizontalMatrix = [...this.state.boardGame]\n    let verticalMatrix = this.transposeMatrix(horizontalMatrix)\n    this.checkIfWinHorizontal(color, horizontalMatrix)\n    this.checkIfWinHorizontal(color, verticalMatrix)\n    this.checkIfWinDiagonalLeft(color, horizontalMatrix)\n    this.checkIfWinDiagonalRight(color, horizontalMatrix)\n  }\n\n  // transpone la matriz, girándola para convertir las filas en columnas y poder comprobar si hay linea en horizontal y aprovechar la función checkIfWinHorizontal\n  transposeMatrix(horizontalMatrix) {\n    let verticalMatrix = horizontalMatrix[0].map((col, i) =>\n                           horizontalMatrix.map(row => row[i]));\n    return verticalMatrix;\n  }\n\n  // comprobar si hay linea en horizontal\n  checkIfWinHorizontal(color, matrix) {\n    for(let i = 0; i < matrix.length; i++) {\n      for(let j = 0; j < matrix[i].length; j++) {\n        if(matrix[i][j] === matrix[i][j+1]\n          && matrix[i][j] === matrix[i][j+2]\n          && matrix[i][j] === matrix[i][j+3]\n          && matrix[i][j] === color) {\n          this.setState({\n            ...this.state,\n            isWon: true,\n            color,\n            player: color === 'red' ? 'Player 2' : 'Player Pc'\n          })\n        }\n      }\n    }\n  }\n\n  // comprobar si hay linea en la diagonal de izquierda a derecha\n  checkIfWinDiagonalLeft(color, matrix) {\n    for(let i = 3; i < matrix.length; i++) {\n      for(let j = 0; j < matrix[i].length; j++) {\n        if(matrix[i][j] === matrix[i-1][j+1]\n          && matrix[i][j] === matrix[i-2][j+2]\n          && matrix[i][j] === matrix[i-3][j+3]\n          && matrix[i][j] === color) {\n          this.setState({\n            ...this.state,\n            isWon: true,\n            color,\n            player: color === 'red' ? 'Player 2' : 'Player Pc'\n          })\n        }\n      }\n    }\n  }\n\n  // comprobar si hay linea en la diagonal de derecha a izquierda\n  checkIfWinDiagonalRight(color, matrix) {\n    for(let i = 5; i > 3; i--) {\n      for(let j = 6; j > 3; j--) {\n        if(matrix[i][j] === matrix[i-1][j-1]\n         && matrix[i][j] === matrix[i-2][j-2]\n          && matrix[i][j] === matrix[i-3][j-3]\n          && matrix[i][j] === color) {\n          this.setState({\n            ...this.state,\n            isWon: true,\n            color,\n            player: color === 'red' ? 'Player 2' : 'Player Pc'\n          })\n        }\n      }\n    }\n  }\n\n  // reinicia el state\n  restart =() => {\n    this.setState({\n      boardGame: Array(6).fill().map(() => Array(7).fill(null)),\n      color: 'red',\n      player: 'Player 2',\n      isWon: false\n    })\n  }\n\n// INTELIGENCIA ARTIFICIAL para elegir las jugadas del ordenador:\n\n  // comprobar si el usuario va a ganar haciendo linea horizontal\n  checkHorizontalIA(color, matrix) {\n    for(let i = 0; i < matrix.length; i++) {\n      for(let j = 0; j < matrix[i].length; j++) {\n        if(matrix[i][j] === matrix[i][j+1]\n          && matrix[i][j] === matrix[i][j+2]\n          && matrix[i][j] === color) {\n\n          let nextHorizontalRightPosition = {x: i, y: j+3}\n          let nextHorizontalLeftPosition = {x: i, y: j-1}\n\n          let rightPositionAvailable = this.getLastEmptyPosition(j+3)\n          let leftPositionAvailable = this.getLastEmptyPosition(j-1)\n\n          if(rightPositionAvailable && rightPositionAvailable.x === nextHorizontalRightPosition.x && rightPositionAvailable.y === nextHorizontalRightPosition.y) {\n              return rightPositionAvailable;\n          } else if(leftPositionAvailable && leftPositionAvailable.x === nextHorizontalLeftPosition.x && leftPositionAvailable.y === nextHorizontalLeftPosition.y) {\n              return leftPositionAvailable;\n          }\n        }\n      }\n    }\n  }\n\n  // comprobar si el usuario va a ganar haciendo linea vertical\n  checkVerticalIA(color, matrix) {\n    for(let i = 2; i < matrix.length; i++) {\n      for(let j = 0; j < matrix[i].length; j++) {\n        if(matrix[i][j] === matrix[i-1][j]\n          && matrix[i][j] === matrix[i-2][j]\n          && matrix[i][j] === color) {\n\n          let nextVerticalPosition = {x: i-3, y: j}\n          let verticalPositionAvailable = this.getLastEmptyPosition(j)\n\n          if(verticalPositionAvailable && verticalPositionAvailable.x === nextVerticalPosition.x && verticalPositionAvailable.y === nextVerticalPosition.y) {\n              return verticalPositionAvailable;\n          }\n        }\n      }\n    }\n  }\n\n  // comprobar si el usuario va a ganar haciendo linea diagonal-izquierda\n  checkDiagonalLeftIA(color, matrix) {\n    for(let i = 3; i < matrix.length; i++) {\n      for(let j = 0; j < matrix[i].length; j++) {\n        if(matrix[i][j] === matrix[i-1][j+1]\n          && matrix[i][j] === matrix[i-2][j+2]\n          && matrix[i][j] === color) {\n\n          let nextDiagonalLeftPosition = {x: i-3, y: j+3}\n          let diagonalLeftPositionAvailable = this.getLastEmptyPosition(j+3);\n\n          if(diagonalLeftPositionAvailable && diagonalLeftPositionAvailable.x === nextDiagonalLeftPosition.x && diagonalLeftPositionAvailable.y === nextDiagonalLeftPosition.y) {\n              return diagonalLeftPositionAvailable;\n          }\n        }\n      }\n    }\n  }\n\n  // comprobar si el usuario va a ganar haciendo linea diagonal-derecha\n  checkDiagonalRightIA(color, matrix) {\n    for(let i = 5; i > 3; i--) {\n      for(let j = 6; j > 3; j--) {\n        if(matrix[i][j] === matrix[i-1][j-1]\n         && matrix[i][j] === matrix[i-2][j-2]\n          && matrix[i][j] === color) {\n\n          let nextDiagonalRightPosition = {x: i-3, y: j-3}\n          let diagonalRightPositionAvailable = this.getLastEmptyPosition(j-3);\n\n          if(diagonalRightPositionAvailable && diagonalRightPositionAvailable.x === nextDiagonalRightPosition.x && diagonalRightPositionAvailable.y === nextDiagonalRightPosition.y) {\n              return diagonalRightPositionAvailable;\n          }\n        }\n      }\n    }\n  }\n\n  // elegir una posición random para que juege el ordenador de entre las que quedan disponibles.\n  getRandomPositionPc() {\n    let availableColumns = this.getAllEmptyPositions()\n      .map(elem => elem.y)\n      .filter(function(item, index, array) {\n        return array.indexOf(item) === index;\n      })\n\n    let randomIndex = Math.floor(Math.random() * (availableColumns.length))\n    let randomColumn = availableColumns[randomIndex]\n    let pcPosition = this.getLastEmptyPosition(randomColumn)\n    return pcPosition\n  }\n\n  // función que decide qué posición va a jugar el ordenador. Entre las posibles que tenga, que son en las que sabe que el otro jugador va a ganar, elige una de manera random.\n  artificialInteligence() {\n    let matrix = this.state.boardGame\n    let pcMovesInHorizontal = this.checkHorizontalIA('red', matrix)\n    let pcMovesInVertical = this.checkVerticalIA('red', matrix);\n    let pcMovesInDiagonalLeft = this.checkDiagonalLeftIA('red', matrix)\n    let pcMovesInDiagonalRight = this.checkDiagonalRightIA('red', matrix)\n    let pcRandomMove = this.getRandomPositionPc();\n\n    let posibleMovements = []\n\n    if(pcMovesInHorizontal) {\n      posibleMovements.push(pcMovesInHorizontal)\n    } else if(pcMovesInVertical) {\n      posibleMovements.push(pcMovesInVertical)\n    } else if(pcMovesInDiagonalLeft) {\n      posibleMovements.push(pcMovesInDiagonalLeft)\n    } else if(pcMovesInDiagonalRight) {\n      posibleMovements.push(pcMovesInDiagonalRight)\n    }\n\n    if (posibleMovements.length > 0) {\n      let randomIndex = Math.floor(Math.random() * posibleMovements.length)\n      return posibleMovements[randomIndex];\n    } else {\n      return pcRandomMove\n    }\n  }\n\n  // jugada del Pc\n  playPc = () => {\n    setTimeout(() => {\n      if(this.state.player === 'Player 1') {\n        let decisionPc = this.artificialInteligence()\n        console.log(decisionPc)\n        this.putAPiece(decisionPc);\n        this.checkIfWinner('blue')\n      }}, 500)\n  }\n\n  // cuando se actualiza el estado, ejecutamos la función que permite al PC colocar su ficha\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState !== this.state) {\n      this.playPc()\n    }\n  }\n  // renderizar la aplicación\n  render() {\n    return (\n      <Fragment>\n        <main>\n          <div className='left-container'>\n            <div className=\"boardGame-container\">\n              {this.state.boardGame.map((row, rowIndex) => (\n                row.map((cell, cellIndex) => (\n                  <Board\n                    X = {rowIndex}\n                    Y = {cellIndex}\n                    color = {cell}\n                    playGame = {this.playGame}\n                    key = {rowIndex + ' ' + cellIndex}\n                  />\n                ))\n              ))}\n            </div>\n          </div>\n          <div className='right-container'>\n\n          {!this.state.isWon\n            ?\n            <div className='text-turn-container'>\n              <h2>{this.state.player === 'Player 2' ? 'Player 2' : 'Player PC'}, is your turn.</h2>\n              <div className='turn-container'>\n                <h2 className={this.state.player === 'Player 1' ? 'blue' : 'blue inactive'}>PC</h2>\n                <h2 className={this.state.player === 'Player 2' ? 'red' : 'red inactive'}>Player 2</h2>\n              </div>\n            </div>\n            :\n            <div className='winner-container'>\n              <h2>{this.state.isWon === true ? this.state.player + ' wins!' : 'This is a draw!'}</h2>\n            </div>\n          }\n\n            <div>\n              <button onClick={this.restart} className='restart-button'>\n                  Restart\n              </button>\n                <Link to='/'>\n                  <button className='end-game-button'>\n                    End game\n                  </button>\n                </Link>\n            </div>\n          </div>\n        </main>\n      </Fragment>\n    );\n  }\n}\n\nexport default SinglePlayer;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './Rules.css';\nimport rulesGIf from './rules.gif';\n\nconst Rules = () => (\n  <div className='instructions-container'>\n    <h2>INSTRUCTIONS</h2>\n    <p>Click on a column to drop your piece.</p>\n    <p>The goal is to connect four pieces vertically, horizontally or diagonally before your rival.</p>\n    <p>Make four in a row to win!</p>\n    <img src={rulesGIf} alt=\"animated rules\" />\n    <h2>PLAYERS</h2>\n    <p>You can play against a friend in the same Pc or try your luck against the computer, up to you!</p>\n    <div className='players-icons-container'>\n      <Link to='/twoPlayers'>\n        <i className=\"fas fa-user\"></i>\n        <i className=\"fas fa-user\"></i>\n      </Link>\n      <Link to='/singlePlayer'>\n        <i className=\"fas fa-desktop\"></i>\n        <i className=\"fas fa-user\"></i>\n      </Link>\n    </div>\n </div>\n)\n\nexport default Rules;","import React, { Fragment } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport TwoPlayers from './components/TwoPlayers/TwoPlayers';\nimport SinglePlayer from './components/SinglePlayer/SinglePlayer';\nimport Rules from './components/Rules/Rules';\nimport {PUBLIC_URL} from './settings';\n\nconst App = () => (\n  <Fragment>\n    <header>\n      <h1>Four in a row</h1>\n    </header>\n    <Router basename={PUBLIC_URL}>\n      <Switch>\n        <Route exact path='/' component={Rules} />\n        <Route exact path='/twoPlayers' component={TwoPlayers} />\n        <Route exact path='/singlePlayer' component={SinglePlayer} />\n        <Route component={() => (<div>404 Not found</div>)} />\n      </Switch>\n    </Router>\n  </Fragment>\n)\n\nexport default App;","export const PUBLIC_URL = process.env.PUBLIC_URL || '/';\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}